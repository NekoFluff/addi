// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DSPRecipe d s p recipe
//
// swagger:model DSPRecipe
type DSPRecipe struct {

	// made in
	// Required: true
	MadeIn *string `json:"madeIn"`

	// materials
	// Required: true
	Materials []*DSPMaterial `json:"materials"`

	// name
	// Required: true
	Name *string `json:"name"`

	// produce
	// Required: true
	Produce *float64 `json:"produce"`

	// time
	// Required: true
	Time *float64 `json:"time"`
}

// Validate validates this d s p recipe
func (m *DSPRecipe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMadeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaterials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DSPRecipe) validateMadeIn(formats strfmt.Registry) error {

	if err := validate.Required("madeIn", "body", m.MadeIn); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipe) validateMaterials(formats strfmt.Registry) error {

	if err := validate.Required("materials", "body", m.Materials); err != nil {
		return err
	}

	for i := 0; i < len(m.Materials); i++ {
		if swag.IsZero(m.Materials[i]) { // not required
			continue
		}

		if m.Materials[i] != nil {
			if err := m.Materials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("materials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("materials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DSPRecipe) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipe) validateProduce(formats strfmt.Registry) error {

	if err := validate.Required("produce", "body", m.Produce); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipe) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this d s p recipe based on the context it is used
func (m *DSPRecipe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMaterials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DSPRecipe) contextValidateMaterials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Materials); i++ {

		if m.Materials[i] != nil {
			if err := m.Materials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("materials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("materials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DSPRecipe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DSPRecipe) UnmarshalBinary(b []byte) error {
	var res DSPRecipe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

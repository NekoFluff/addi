// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DSPRecipeResponse d s p recipe response
//
// swagger:model DSPRecipeResponse
type DSPRecipeResponse struct {

	// consumes per sec
	// Required: true
	ConsumesPerSec interface{} `json:"consumesPerSec"`

	// crafting per second
	// Required: true
	CraftingPerSecond *float64 `json:"craftingPerSecond"`

	// for
	// Required: true
	For *string `json:"for"`

	// made in
	// Required: true
	MadeIn *string `json:"madeIn"`

	// number of facilities needed
	// Required: true
	NumberOfFacilitiesNeeded *float64 `json:"numberOfFacilitiesNeeded"`

	// produce
	// Required: true
	Produce *string `json:"produce"`

	// seconds spend per crafting
	// Required: true
	SecondsSpendPerCrafting *float64 `json:"secondsSpendPerCrafting"`
}

// Validate validates this d s p recipe response
func (m *DSPRecipeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsumesPerSec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCraftingPerSecond(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMadeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfFacilitiesNeeded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondsSpendPerCrafting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DSPRecipeResponse) validateConsumesPerSec(formats strfmt.Registry) error {

	if m.ConsumesPerSec == nil {
		return errors.Required("consumesPerSec", "body", nil)
	}

	return nil
}

func (m *DSPRecipeResponse) validateCraftingPerSecond(formats strfmt.Registry) error {

	if err := validate.Required("craftingPerSecond", "body", m.CraftingPerSecond); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipeResponse) validateFor(formats strfmt.Registry) error {

	if err := validate.Required("for", "body", m.For); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipeResponse) validateMadeIn(formats strfmt.Registry) error {

	if err := validate.Required("madeIn", "body", m.MadeIn); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipeResponse) validateNumberOfFacilitiesNeeded(formats strfmt.Registry) error {

	if err := validate.Required("numberOfFacilitiesNeeded", "body", m.NumberOfFacilitiesNeeded); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipeResponse) validateProduce(formats strfmt.Registry) error {

	if err := validate.Required("produce", "body", m.Produce); err != nil {
		return err
	}

	return nil
}

func (m *DSPRecipeResponse) validateSecondsSpendPerCrafting(formats strfmt.Registry) error {

	if err := validate.Required("secondsSpendPerCrafting", "body", m.SecondsSpendPerCrafting); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this d s p recipe response based on context it is used
func (m *DSPRecipeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DSPRecipeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DSPRecipeResponse) UnmarshalBinary(b []byte) error {
	var res DSPRecipeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InArt in art
//
// swagger:model InArt
type InArt struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// height
	// Required: true
	Height *int64 `json:"height"`

	// possibly sensitive
	// Required: true
	PossiblySensitive *bool `json:"possiblySensitive"`

	// tweet Id
	// Required: true
	TweetID *string `json:"tweetId"`

	// url
	// Required: true
	URL *string `json:"url"`

	// width
	// Required: true
	Width *int64 `json:"width"`
}

// Validate validates this in art
func (m *InArt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossiblySensitive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTweetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InArt) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validatePossiblySensitive(formats strfmt.Registry) error {

	if err := validate.Required("possiblySensitive", "body", m.PossiblySensitive); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validateTweetID(formats strfmt.Registry) error {

	if err := validate.Required("tweetId", "body", m.TweetID); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *InArt) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this in art based on context it is used
func (m *InArt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InArt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InArt) UnmarshalBinary(b []byte) error {
	var res InArt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
